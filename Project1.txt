CHIP And {
    IN a, b;
    OUT out;
    
    PARTS:
    Nand(a=a , b=b , out=OutNand1 );
    Nand(a=OutNand1 , b=OutNand1 , out=out );
}


CHIP Xor {
    IN a, b;
    OUT out;

    PARTS:
    Not(in=a , out=Nota );
    Not(in=b, out=Notb );
    And(a=Nota , b=b , out=AndOut1 );
    And(a=a , b=Notb , out=AndOut2 );
    Or(a=AndOut1 , b=AndOut2 , out=out );
    
}

CHIP Mux {
    IN a, b, sel;
    OUT out;

    PARTS:
    Not(in=sel , out=NotSel );
    And(a=b , b=sel , out=And1 );
    And(a=a , b=NotSel , out=And2 );
    Or(a=And1 , b=And2 , out=out );
}

CHIP DMux {
    IN in, sel;
    OUT a, b;

    PARTS:
    Nand(a=sel , b=sel , out=Notsel );
    Nand(a=in , b=Notsel , out=Preand );
    Nand(a=Preand , b=Preand , out=a );
    Nand(a=in , b=sel , out=and2 );
    Nand(a=and2 , b=and2 , out=b );
    
}

CHIP Not16 {
    IN in[16];
    OUT out[16];

    PARTS:
    Nand(a=in[0] , b=in[0] , out=out[0]);
    Nand(a=in[1] , b=in[1] , out=out[1]);
    Nand(a=in[2] , b=in[2] , out=out[2]);
    Nand(a=in[3] , b=in[3] , out=out[3]);
    Nand(a=in[4] , b=in[4] , out=out[4]);
    Nand(a=in[5] , b=in[5] , out=out[5]);
    Nand(a=in[6] , b=in[6] , out=out[6]);
    Nand(a=in[7] , b=in[7] , out=out[7]);
    Nand(a=in[8] , b=in[8] , out=out[8]);
    Nand(a=in[9] , b=in[9] , out=out[9]);
    Nand(a=in[10] , b=in[10] , out=out[10]);
    Nand(a=in[11] , b=in[11] , out=out[11]);
    Nand(a=in[12] , b=in[12] , out=out[12]);
    Nand(a=in[13] , b=in[13] , out=out[13]);
    Nand(a=in[14] , b=in[14] , out=out[14]);
    Nand(a=in[15] , b=in[15] , out=out[15]);

   
}


CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;

    PARTS:
    Nand(a=sel[0] , b=sel[0] , out=Nots0 );
    Nand(a=sel[1] , b=sel[1] , out=Nots1 );
    //----------
    And(a=in , b=Nots1 , out=temp );
    And(a=temp , b=Nots0 , out=a );
    //----------------
    And(a=in , b=Nots1 , out=temp1 );
    And(a=temp1 , b=sel[0] , out=b );
    //--------------------
    And(a=in , b=sel[1] , out=temp2);
    And(a=temp2 , b=Nots0 , out=c );
    //--------------------
    And(a=in , b=sel[1] , out=temp3);
    And(a=temp2 , b=sel[0] , out=d );
}



// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //--------------
    Mux16(a= x, b= false, sel=zx , out=temp1 );
    Not16(in=temp1 , out=nottemp1 );
    Mux16(a=temp1 , b=nottemp1 , sel=nx , out=temp2 );
    //--------------
    Mux16(a=y , b=false , sel=zy , out=temp3 );
    Not16(in=temp3 , out=nottemp3 );
    Mux16(a=temp3 , b=nottemp3 , sel=ny , out=temp4 );
    //---------------------
    Add16(a =temp2 , b =temp4 , out =AddOut );
    And16(a=temp2 , b=temp4 , out=AndOut );
    //-------------------------------
    Mux16(a=AndOut , b=AddOut , sel=f , out=temp5 );
    //---------------------
    Not16(in=temp5 , out=notout );
    //-----------final output-----------------------
    Mux16(a=temp5 , b=notout , sel=no , out=out );






}